C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE UART_DRIVER
OBJECT MODULE PLACED IN .\src\UART_Driver.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\A92862\
                    -SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\UART_Driver.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(
                    -2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\A92862\SimplicityStudio\v4_workspace\EFM
                    -8BB1_BLDC_PORT\inc;C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\config;C:/SiliconLabs/SimplicityS
                    -tudio/v4/developer/sdks/8051/v4.1.7//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/develope
                    -r/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/Si
                    -liconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8BB1_LCK/config;C:/SiliconLabs/SimplicityStudio/v4/dev
                    -eloper/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/
                    -EFM8BB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/peripheral_driver/inc) PRINT(.
                    -\src\UART_Driver.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\UART_Driver.OBJ)

line level    source

   1          /*
   2           * UART_Driver.c
   3           *
   4           *  Created on: Jan 20, 2020
   5           *      Author: a92862
   6           */
   7          
   8          
   9          //------------------------------------------------------------------------------
  10          // INCLUDES
  11          //------------------------------------------------------------------------------
  12          #include "bldcdk.h"
*** WARNING C322 IN LINE 130 OF \Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\BLDC_RD_Build_Params.h
             -: unknown identifier
  13          
  14          
  15          #ifdef BUILD_FOR_UART
  16          
  17          
  18          //------------------------------------------------------------------------------
  19          // Local Constants
  20          //------------------------------------------------------------------------------
  21          #define TIMER1_INT 0
  22          
  23          #if 1
  24          #define UART_TX_BUFFER_FREE_BYTES \
  25                       ((UART_tx_buffer_head - UART_tx_buffer_tail) & (UART_BUF_SIZE - 1))
  26          
  27          #define UART_TX_BUFFER_FULL  (1 == (UART_TX_BUFFER_FREE_BYTES))
  28          
  29          #define UART_TX_BUFFER_EMPTY (0 == (UART_TX_BUFFER_FREE_BYTES))
  30          
  31          #define UART_INC_TXPTR(p) do {  \
  32              (p)++;  \
  33              if ((p) == &UART_tx_buffer[UART_BUF_SIZE])    \
  34                  (p) = &UART_tx_buffer[0];   \
  35          } while (0)
  36          
  37          #define UART_RX_BUFFER_FREE_BYTES \
  38                       ((UART_rx_buffer_head - UART_rx_buffer_tail) & (UART_BUF_SIZE - 1))
  39          
  40          #define UART_RX_BUFFER_FULL  (1 == (UART_RX_BUFFER_FREE_BYTES))
  41          
  42          #define UART_RX_BUFFER_EMPTY (0 == (UART_RX_BUFFER_FREE_BYTES))
  43          
  44          #define UART_INC_RXPTR(p) do {  \
  45              (p)++;  \
C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 2   

  46              if ((p) == &UART_rx_buffer[UART_BUF_SIZE])    \
  47                  (p) = &UART_rx_buffer[0];   \
  48          } while (0)
  49          
  50          #else
              
              #define UART_TX_BUFFER_FULL                               \
                 ((UART_tx_buffer_tail == (UART_tx_buffer_head - 1)) || \
                 ((UART_tx_buffer_tail == (UART_BUF_SIZE - 1)) && (UART_tx_buffer_head == 0)))
              
              #define UART_TX_BUFFER_EMPTY   (UART_tx_buffer_tail == UART_tx_buffer_head)
              
              #define UART_RX_BUFFER_FULL                               \
                 ((UART_rx_buffer_tail == (UART_rx_buffer_head - 1)) || \
                 ((UART_rx_buffer_tail == (UART_BUF_SIZE - 1)) && (UART_rx_buffer_head == 0)))
              
              #define UART_RX_BUFFER_EMPTY   (UART_rx_buffer_tail == UART_rx_buffer_head)
              
              #endif
  65          
  66          
  67          //------------------------------------------------------------------------------
  68          // Local Variables
  69          //------------------------------------------------------------------------------
  70          
  71          //------------------------------------------------------------------------------
  72          // TX BUFFER
  73          // UART_Tx_Buffer[] holds data to be send over UART. The next data to be sent
  74          // over UART is at index UART_tx_buffer_head and next data byte can be queued at
  75          // index UART_tx_buffer_tail.
  76          // UART_Tx_Busy is set when data byte is written to UART register and cleared
  77          // when that byte is transmitted successfully.
  78          //------------------------------------------------------------------------------
  79          volatile U8 SEG_IDATA UART_tx_buffer[UART_BUF_SIZE];
  80          volatile U8 SEG_IDATA *UART_tx_buffer_head;
  81          volatile U8 SEG_IDATA *UART_tx_buffer_tail;
  82          volatile bit UART_tx_busy;
  83          
  84          
  85          //------------------------------------------------------------------------------
  86          // RX BUFFER
  87          // UART_Rx_Buffer[] holds data received from UART. The next data byte to be read
  88          // by application is at index UART_rx_buffer_head and next received byte will be
  89          // stored at index UART_rx_buffer_tail.
  90          //------------------------------------------------------------------------------
  91          volatile U8 SEG_IDATA UART_rx_buffer[UART_BUF_SIZE];
  92          volatile U8 SEG_IDATA *UART_rx_buffer_head;
  93          volatile U8 SEG_IDATA *UART_rx_buffer_tail;
  94          
  95          //------------------------------------------------------------------------------
  96          // UART_init_buffers
  97          // void UART_init_buffers (void)
  98          //
  99          // Return Value:
 100          //     None
 101          //
 102          // Parameters:
 103          //     None
 104          //
 105          // Description:
 106          //     This function is called at startup to initialize Tx and Rx buffers such
 107          //     that both buffers are empty and respective Head and Tail indices are set
 108          //     to 0. It can also be called by application.
C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 3   

 109          //
 110          // WARNING: Use with care. Any unread data or data-in-wait will be lost.
 111          //------------------------------------------------------------------------------
 112          void UART_init_buffers (void)
 113          {
 114   1          UART_tx_buffer_head = &UART_tx_buffer[0];
 115   1          UART_tx_buffer_tail = &UART_tx_buffer[0];
 116   1          UART_rx_buffer_head = &UART_rx_buffer[0];
 117   1          UART_rx_buffer_tail = &UART_rx_buffer[0];
 118   1      }
 119          
 120          //------------------------------------------------------------------------------
 121          // UART_send_byte
 122          // U8 UART_send_byte (U8)
 123          //
 124          // Return Value:
 125          //     Returns error code of type uart_error_t
 126          //
 127          // Parameters:
 128          //     Data byte to be sent over UART
 129          //
 130          // Description:
 131          //     This function is called by application to send a data byte over UART.
 132          //     UART driver doesn't impose any restriction on the value of data byte.
 133          //     The data byte is put in an internal buffer and will only be send when all
 134          //     previous data bytes are sent. If driver is unable to accept new data byte
 135          //     then it doesn't block, instead it returns UART_ERROR_TX_BUFFER_FULL. Such
 136          //     condition should be handled by application.
 137          //------------------------------------------------------------------------------
 138          U8 UART_send_byte (U8 value)
 139          {
 140   1          //Return error if Tx buffer is full.
 141   1          if (UART_TX_BUFFER_FULL)
 142   1          {
 143   2              return UART_ERROR_TX_BUFFER_FULL;
 144   2          }
 145   1      
 146   1          //Queue new byte at tail of buffer, update tail and count
 147   1          *UART_tx_buffer_tail = value;
 148   1      
 149   1          IE_ES0 = 0;
 150   1          UART_INC_TXPTR(UART_tx_buffer_tail);
 151   1          IE_ES0 = 1;
 152   1      
 153   1          if (0 == UART_tx_busy)
 154   1          {
 155   2              //Since UART is free for transmission, trigger transmission now
 156   2              SCON0_TI = 1;
 157   2          }
 158   1      
 159   1          return UART_SUCCESS;
 160   1      }
 161          
 162          //------------------------------------------------------------------------------
 163          // UART_receive_byte
 164          // U8 UART_receive_byte (U8 data *)
 165          //
 166          // Return Value:
 167          //     Returns error code of type uart_error_t
 168          //
 169          // Parameters:
 170          //     Pointer to the variable where received byte is to be copied
 171          //
C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 4   

 172          // Description:
 173          //     This function is called by application to read a data byte from UART. The
 174          //     driver receives data from UART independent of application calls and saves
 175          //     it into internal buffer. This function returns oldest unread data byte
 176          //     from internal buffer. If buffer doesn't contain any unread byte then it
 177          //     doesn't block, instead it returns UART_ERROR_RX_BUFFER_EMPTY. In this
 178          //     case, application has to retry.
 179          //------------------------------------------------------------------------------
 180          U8 UART_receive_byte (U8 data *value)
 181          {
 182   1          //Return error if Rx buffer is empty.
 183   1          if (UART_RX_BUFFER_EMPTY)
 184   1          {
 185   2              return UART_ERROR_RX_BUFFER_EMPTY;
 186   2          }
 187   1      
 188   1          //Queue new byte at tail of buffer, update tail and count
 189   1          *value = *UART_rx_buffer_head;
 190   1      
 191   1          IE_ES0 = 0;
 192   1          UART_INC_RXPTR(UART_rx_buffer_head);
 193   1          IE_ES0 = 1;
 194   1      
 195   1          return UART_SUCCESS;
 196   1      }
 197          #if 1
 198          //------------------------------------------------------------------------------
 199          // UART_get_tx_buffer_free_bytes
 200          // U8 UART_get_tx_buffer_free_bytes (void)
 201          //
 202          // Return Value:
 203          //     Returns the number of free bytes in UART_tx_buffer[]
 204          //
 205          // Parameters:
 206          //     None
 207          //
 208          // Description:
 209          //     This function can be called by application to know how much space (bytes)
 210          //     is available in tx buffer. Application can wait until required amount of
 211          //     bytes is not free.
 212          //
 213          //------------------------------------------------------------------------------
 214          U8 UART_get_tx_buffer_free_bytes (void)
 215          {
 216   1          if (UART_tx_buffer_head != UART_tx_buffer_tail)
 217   1          {
 218   2              return UART_TX_BUFFER_FREE_BYTES;
 219   2          }
 220   1          else
 221   1          {
 222   2              return UART_BUF_SIZE;
 223   2          }
 224   1      
 225   1      }
 226          #endif
 227          
 228          
 229          //-----------------------------------------------------------------------------
 230          // UART0_ISR
 231          //-----------------------------------------------------------------------------
 232          //
 233          // UART0 ISR Content goes here. Remember to clear flag bits:
 234          // SCON0::RI (Receive Interrupt Flag)
C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 5   

 235          // SCON0::TI (Transmit Interrupt Flag)
 236          //
 237          //-----------------------------------------------------------------------------
 238          SI_INTERRUPT (UART0_ISR, UART0_IRQn)
 239          {
 240   1              if (SCON0_RI == 1)
 241   1                  {
 242   2                      //This bit is not cleared by hardware, so clear it here.
 243   2                              SCON0_RI = 0;
 244   2      
 245   2              #if 0 //To test the behaviour if alternate byte is not read from SBUF0
                              if (0 == temp)
                              {
                                  UART_rx_buffer[UART_rx_buffer_tail] = SBUF0;
                                  UART_rx_buffer_tail++;
              
                                              if (UART_BUF_SIZE <= UART_rx_buffer_tail)
                                  {
                                      UART_rx_buffer_tail = 0;
                                  }
                              }
                              else
                              {
              
                              }
                              temp ^= 1;
                      #else
 262   2      
 263   2                      //If UART Rx buffer is full then discard new byte otherwise save it
 264   2                      if (!UART_RX_BUFFER_FULL)
 265   2                      {
 266   3                          *UART_rx_buffer_tail = SBUF0;
 267   3                          UART_INC_RXPTR(UART_rx_buffer_tail);
 268   3                      }
 269   2              #endif
 270   2      
 271   2                  }
 272   1      
 273   1                  //Last byte was transmitted successfully
 274   1                  if (SCON0_TI == 1)
 275   1                  {
 276   2                      //This bit is not cleared by hardware, so clear it here.
 277   2                      SCON0_TI = 0;
 278   2      
 279   2                      //After transmission of last byte driver is now ready for next (if any?)
 280   2                      UART_tx_busy = 0;
 281   2      
 282   2                      if (UART_tx_buffer_head != UART_tx_buffer_tail)
 283   2                      {
 284   3                          //Indicate transmission in progress, get next byte in queue, send it
 285   3                          //and update head and count
 286   3      
 287   3                          UART_tx_busy = 1;
 288   3                          SBUF0 = *UART_tx_buffer_head;
 289   3                          UART_INC_TXPTR(UART_tx_buffer_head);
 290   3                      }
 291   2                  }
 292   1      }
 293          
 294          
 295          #else //BUILD_FOR_UART
              
              //------------------------------------------------------------------------------
C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 6   

              // API
              //------------------------------------------------------------------------------
              
              //------------------------------------------------------------------------------
              // UART_init
              // void UART_init (void)
              //
              // Return Value:
              //     None
              //
              // Parameters:
              //     None
              //
              // Description:
              //     This is a dummy function.
              //------------------------------------------------------------------------------
              void UART_init (void)
              {
              
              }
              
              #ifdef BUILD_FOR_PROTOCOL
              
              //------------------------------------------------------------------------------
              // UART_init_buffers
              // void UART_init_buffers (void)
              //
              // Return Value:
              //     None
              //
              // Parameters:
              //     None
              //
              // Description:
              //     This is a dummy function.
              //------------------------------------------------------------------------------
              void UART_init_buffers (void)
              {
              
              }
              
              //------------------------------------------------------------------------------
              // UART_send_byte
              // U8 UART_send_byte (U8)
              //
              // Return Value:
              //     Returns error code of type uart_error_t
              //
              // Parameters:
              //     Data byte to be sent over UART
              //
              // Description:
              //     This is a dummy function.
              //------------------------------------------------------------------------------
              U8 UART_send_byte (U8 value)
              {
                  return UART_SUCCESS;
              }
              
              //------------------------------------------------------------------------------
              // UART_receive_byte
              // U8 UART_receive_byte (U8 data *)
              //
C51 COMPILER V9.53.0.0   UART_DRIVER                                                       01/20/2020 13:39:20 PAGE 7   

              // Return Value:
              //     Returns error code of type uart_error_t
              //
              // Parameters:
              //     Pointer to the variable where received byte is to be copied
              //
              // Description:
              //     This is a dummy function.
              //------------------------------------------------------------------------------
              U8 UART_receive_byte (U8 data *value)
              {
                  //Nothing received.
                  return UART_ERROR_RX_BUFFER_EMPTY;
              }
              
              //------------------------------------------------------------------------------
              // UART_get_tx_buffer_free_bytes
              // U8 UART_get_tx_buffer_free_bytes (void)
              //
              // Return Value:
              //     Returns the number of free bytes in UART_tx_buffer[]
              //
              // Parameters:
              //     None
              //
              // Description:
              //     This is a dummy function.
              //------------------------------------------------------------------------------
              U8 UART_get_tx_buffer_free_bytes (void)
              {
                  return 0;
              }
              
              #endif //BUILD_FOR_PROTOCOL
              
              #endif //BUILD_FOR_UART
 397          
 398          //-----------------------------------------------------------------------------
 399          // End Of File
 400          //-----------------------------------------------------------------------------
 401          
*** WARNING C316 IN LINE 401 OF C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\UART_Driver.c: unter
             -minated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    207    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =     32    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)

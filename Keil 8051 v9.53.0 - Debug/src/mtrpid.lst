C51 COMPILER V9.53.0.0   MTRPID                                                            01/28/2020 16:32:34 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MTRPID
OBJECT MODULE PLACED IN .\src\mtrpid.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\A92862\
                    -SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\mtrpid.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FL
                    -OATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_
                    -BLDC_PORT\inc;C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\config;C:/SiliconLabs/SimplicityStudio
                    -/v4/developer/sdks/8051/v4.1.7//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdk
                    -s/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8BB1_LCK/config;C:/SiliconLabs/SimplicityStudio/v4/develope
                    -r/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8B
                    -B1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/peripheral_driver/inc) PRINT(.\src\
                    -mtrpid.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\mtrpid.OBJ)

line level    source

   1          /*
   2           * mtrpid.c
   3           *
   4           *  Created on: Jan 16, 2020
   5           *      Author: a92862
   6           */
   7          
   8          
   9          #include "bldcdk.h"
  10          
  11          #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
  12          static U16 newpwm;
  13          static U16 lastspeed;
  14          static U16 curspeed;
  15          static U16 SEG_XDATA Kp;
  16          static U16 SEG_XDATA Ki;
  17          static UU32 SEG_XDATA tmpval;
  18          #endif
  19          bit pid_done;
  20          
  21          static struct pt SEG_XDATA pidth;
  22          
  23          static U8 MTR_pid_compute_thread(void);
  24          
  25          #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
  26          
  27          
  28          //------------------------------------------------------------------------------
  29          // void SL_MTR_change_pid_gain(U16 proportion, U16 integral)
  30          //------------------------------------------------------------------------------
  31          // Return Value:
  32          //     None
  33          //
  34          // Parameters:
  35          //     proportion: pid proportional gain (Ka)
  36          //     integral  : pid integral gain (Ki)
  37          //
  38          // Description:
  39          //     This function allowed for application level to update gains.
  40          //     This will be called by application level only.
  41          //------------------------------------------------------------------------------
  42          void SL_MTR_change_pid_gain(U16 proportion, U16 integral)
  43          {
  44   1          Kp = proportion;
  45   1          Ki = integral;
  46   1      }
  47          
C51 COMPILER V9.53.0.0   MTRPID                                                            01/28/2020 16:32:34 PAGE 2   

  48          //------------------------------------------------------------------------------
  49          // void MTR_pid_init(void)
  50          //------------------------------------------------------------------------------
  51          // Return Value:
  52          //     None
  53          //
  54          // Parameters:
  55          //     None
  56          //
  57          // Description:
  58          //     This function initializes the PI control variables.This should be called
  59          //     at the start, or when the PI gain control variables have been changed.
  60          //     It should also be run if the PI control task has not been executed for
  61          //     a long time.
  62          //------------------------------------------------------------------------------
  63          void MTR_pid_init(void)
  64          {
  65   1          lastspeed = SLR_motor_current_rpm;
  66   1          pid_done = 0;
  67   1      //    Kp = MCP_get_16bit_register(MCP_REG_PROPORTIONAL_GAIN);
  68   1      //    Ki = MCP_get_16bit_register(MCP_REG_INTEGRAL_GAIN);
  69   1      
  70   1          PT_INIT(&pidth);
  71   1      }
  72          
  73          
  74          
  75          //------------------------------------------------------------------------------
  76          // U16 MTR_pid_compute_newpwm(void)
  77          //------------------------------------------------------------------------------
  78          // Return Value:
  79          //     New 16-bit PWM value
  80          //
  81          // Parameters:
  82          //     None
  83          //
  84          // Description:
  85          //     This function calls the thread to compute a new PWM value.
  86          //------------------------------------------------------------------------------
  87          U16 MTR_pid_compute_newpwm(void)
  88          {
  89   1          newpwm = SLR_pwm_duty;
  90   1      
  91   1          (void)MTR_pid_compute_thread();
  92   1      
  93   1          return newpwm;
  94   1      }
  95          
  96          
  97          //------------------------------------------------------------------------------
  98          // U8 MTR_pid_compute_thread(void)
  99          //------------------------------------------------------------------------------
 100          // Return Value:
 101          //     One of Protothread return values:
 102          //     {PT_WAITING, PT_YIELDED, PT_EXITED, PT_ENDED}
 103          //
 104          // Parameters:
 105          //     None
 106          //
 107          // Description:
 108          //     This function implements a thread for the simple velocity form
 109          //     PI control for computing the appropriate PWM value to be applied
 110          //     to the sensorless BLDC motor PWM signal.
C51 COMPILER V9.53.0.0   MTRPID                                                            01/28/2020 16:32:34 PAGE 3   

 111          //------------------------------------------------------------------------------
 112          static U8 MTR_pid_compute_thread(void)
 113          {
 114   1          PT_BEGIN(&pidth);
 115   3      
 116   3          while (1)
 117   3          {
 118   4              PT_WAIT_UNTIL(&pidth, pid_flag);
 119   4      
 120   4              pid_flag = 0;
 121   4      
 122   4              // 50 SYSCLKs
 123   4              curspeed = SLR_motor_current_rpm;
 124   4      
 125   4              // 168 SYSCLKs
 126   4              tmpval.S32 =  (S32)(U32)Kp * ((S32)(U32)lastspeed - curspeed);
 127   4      
 128   4              PT_YIELD(&pidth);
 129   4      
 130   4              // 222 SYSCLKs
 131   4              tmpval.S32 += (S32)(U32)Ki * ((S32)(U32)SLW_target_rpm - curspeed);
 132   4      
 133   4              PT_YIELD(&pidth);
 134   4      
 135   4              // 6 SYSCLKs
 136   4              lastspeed = curspeed;
 137   4      
 138   4              // Scale up by 256 - we assume final number does not overflow
 139   4              tmpval.S32 >>= 8;
 140   4      
 141   4              if (tmpval.S32 < 0)
 142   4              {
 143   5                  tmpval.S32 = -tmpval.S32;
 144   5                  if (tmpval.U32 > LIMIT_STEP_DELTA)
 145   5                  {
 146   6                      newpwm = LIMIT_STEP_DELTA;
 147   6                  }
 148   5                  else
 149   5                  {
 150   6                      newpwm = tmpval.U16[LSB];
 151   6                  }
 152   5      
 153   5                  // Limit the PWM value to avoid overflow
 154   5                  if (SLR_pwm_duty < newpwm)
 155   5                  {
 156   6                      // Rollover will occur - limit PWM to zero
 157   6                      newpwm = 0;
 158   6                  }
 159   5                  else
 160   5                  {
 161   6                      newpwm = SLR_pwm_duty - newpwm;
 162   6                  }
 163   5              }
 164   4              else
 165   4              {
 166   5                  if (tmpval.U32 > LIMIT_STEP_DELTA)
 167   5                  {
 168   6                      newpwm = LIMIT_STEP_DELTA;
 169   6                  }
 170   5                  else
 171   5                  {
 172   6                      newpwm = tmpval.U16[LSB];
 173   6                  }
C51 COMPILER V9.53.0.0   MTRPID                                                            01/28/2020 16:32:34 PAGE 4   

 174   5                  newpwm += SLR_pwm_duty;
 175   5                  if (newpwm < SLR_pwm_duty)
 176   5                  {
 177   6                      // Roll over occurred - adjust the PWM to max limit
 178   6                      newpwm = 0xffff;
 179   6                  }
 180   5              }
 181   4              pid_done = 1;
 182   4          }
 183   3          PT_END(&pidth);
 184   1      }
 185          #endif
 186          
 187          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    534    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 01/20/2020 15:34:31 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB1_BLDC_PORT
OBJECT MODULE PLACED IN .\src\EFM8BB1_BLDC_PORT.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\A92862\
                    -SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\EFM8BB1_BLDC_PORT.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\A92862\SimplicityStudio\v4_workspa
                    -ce\EFM8BB1_BLDC_PORT\inc;C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\config;C:/SiliconLabs/Simpl
                    -icityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/de
                    -veloper/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp
                    -;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8BB1_LCK/config;C:/SiliconLabs/SimplicityStudio/
                    -v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//D
                    -evice/EFM8BB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/peripheral_driver/inc) P
                    -RINT(.\src\EFM8BB1_BLDC_PORT.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8BB1_BLDC_PORT.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PCA0_8Bit_PWM_Output.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          
   8          //-----------------------------------------------------------------------------
   9          // Includes
  10          //-----------------------------------------------------------------------------
  11          
  12          #include "bldcdk.h"
*** WARNING C322 IN LINE 130 OF \Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\BLDC_RD_Build_Params.h
             -: unknown identifier
  13          
  14          //-----------------------------------------------------------------------------
  15          // Function Prototypes
  16          //-----------------------------------------------------------------------------
  17          static U8 APP_tune_callback(U16 pwm, U16 disp);
  18          static bit APP_reset(void);
  19          
  20          //-----------------------------------------------------------------------------
  21          // SiLabs_Startup() Routine
  22          // ----------------------------------------------------------------------------
  23          // This function is called immediately after reset, before the initialization
  24          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  25          // useful place to disable the watchdog timer, which is enable by default
  26          // and may trigger before main() in some instances.
  27          //-----------------------------------------------------------------------------
  28          void SiLabs_Startup (void)
  29          {
  30   1          WDTCN = 0xDE;           // Disable watchdog timer
  31   1          WDTCN = 0xAD;
  32   1      }
  33           
  34          //-----------------------------------------------------------------------------
  35          // main() Routine
  36          //-----------------------------------------------------------------------------
  37          
  38          void main(void)
  39          {
  40   1              enter_DefaultMode_from_RESET();
  41   1      
  42   1              MCP_tune_callback = &APP_tune_callback;
  43   1              MCP_reset_callback = &APP_reset;
  44   1              MCP_init();
  45   1              SL_MTR_init();
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 01/20/2020 15:34:31 PAGE 2   

  46   1              MTRAPP_init();
  47   1      
  48   1      
  49   1              while (1)
  50   1              {
  51   2                      ADC_task();
  52   2                      btn_process();
  53   2                      MTRAPP_task();
  54   2                      MCP_task();
  55   2              }
  56   1      }
  57          
  58          
  59          //------------------------------------------------------------------------------
  60          // This call-back will be called by MCP_Task() when TUNE command is executed
  61          //------------------------------------------------------------------------------
  62          #ifdef FEATURE_PID_TUNE_FUNCTION
              U16 SEG_XDATA C0;
              U16 SEG_XDATA tune_disp;
              U8 SEG_XDATA tune_cnt = 0;
              U16 SEG_XDATA Y0, Amplitude;
              U16 SEG_XDATA half_pu, Pu;
              U16 SEG_XDATA last_half_pu;
              U16 SEG_XDATA max_speed, last_max_speed;
              U16 SEG_XDATA twait, twait0;
              U16 SEG_XDATA speed, prev_speed;
              U16 SEG_XDATA nKu, nKi, nKp;
              U32 SEG_XDATA KA;
              bit dec;
              bit tune_in_progress;
              extern struct pt SEG_XDATA mcp_tune;
              #define TEST_CNT    20
              
              #define KP_KONST    ((U32)(ROUND_DIV((U32)(65536UL*3.2*3.14),(4UL*256))))
              #define KI_KONST    ((U32)ROUND_DIV( (U32)(65536UL*3.2*2.2*3.14), (4UL*256*((DEFAULT_PID_INTERVAL+1)))))
              
              static U8 APP_tune_callback(U16 pwm, U16 disp)
              {
                  bit event = 0;
                  C0 = pwm;
                  tune_disp = disp;
              
                  tune_in_progress = 1;
                  PT_BEGIN(&mcp_tune);
              
                  // wait until motor started...
                  PT_WAIT_UNTIL(&mcp_tune, (MOTOR_RUNNING == SLR_motor_state));
              
                  // motor started. wait stable running
                  // set initial duty cycle(C0) for test
                  SLR_pwm_duty = C0;
                  PCA_change_duty_cycle(SLR_pwm_duty);
              
                  twait0 = SL_MTR_time();
                  twait = twait0;
                  while((twait - twait0) < 5000)
                  {
                      twait = SL_MTR_time();
                      PT_YIELD(&mcp_tune);
                  }
              
                  // start pid tuning.
                  // save initial speed.
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 01/20/2020 15:34:31 PAGE 3   

                  Y0 = MCP_get_16bit_register(MCP_REG_PRESENT_MOTOR_SPEED);
                  tune_cnt = 0;
                  dec = 1;
                  half_pu = 0L;
                  max_speed = 0;
              
                  // decrease duty cycle firstly.
                  SLR_pwm_duty = C0 - tune_disp;
                  PCA_change_duty_cycle(SLR_pwm_duty);
                  while(tune_cnt < TEST_CNT)
                  {
                      PT_WAIT_UNTIL(&mcp_tune, ((U8)SL_MTR_time() & DEFAULT_PID_INTERVAL) == 0);
                      speed = MCP_get_16bit_register(MCP_REG_PRESENT_MOTOR_SPEED);
                      if(dec)
                      {
                          if( (speed+2) < Y0)
                          {
                              SLR_pwm_duty = C0 + tune_disp;
                              event = 1;
                          }
                      }
                      else
                      {
                          if( speed > (Y0+2) )
                          {
                              SLR_pwm_duty = C0 - tune_disp;
                              event = 1;
                          }
                      }
                      if(event)
                      {
                          PCA_change_duty_cycle(SLR_pwm_duty);
                          twait = SL_MTR_time();
                          dec = ~dec;
                          tune_cnt++;
                          half_pu = twait - last_half_pu;
                          last_half_pu = twait;
                          last_max_speed = max_speed;
                          event = 0;
                      }
              
                      if( speed > max_speed)
                      {
                          max_speed = speed;
                      }
                      //PT_YIELD(&mcp_tune);
                  }
              
                  // end test
                  Pu = half_pu*2;
                  Amplitude = (last_max_speed-Y0);
              #if 0
                  MCP_debug_print("P%d\n", (U32)Pu);
                  MCP_debug_print("A%d\n", (U32)Amplitude);
              #endif
              
                  // Ku = (4*d)/(a*3.14)
                  // Tyreus-Luyben PI Variables.
                  // Kp = Ku/3.2 = 4*d/(a*3.14*3.2)
                  KA = KP_KONST*Amplitude;
                  nKp = ROUND_DIV((((U32)tune_disp)<<16), KA);
                  // Ki = Kp/(2.2*Pu) = 4*d/(a*3.14*3.2*2.2*Pu);
                  KA = KA*Pu;
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 01/20/2020 15:34:31 PAGE 4   

                  nKi = ROUND_DIV((((U32)tune_disp)<<16), KA);
              
                  MCP_set_16bit_register(MCP_REG_PROPORTIONAL_GAIN,nKp, 0);
                  MCP_set_16bit_register(MCP_REG_INTEGRAL_GAIN,nKi, 0);
              
                  //Done
                  tune_in_progress = 0;
                  PT_END(&mcp_tune);
                  return 2;
              }
              
              #else
 184          static U8 APP_tune_callback(U16 pwm, U16 disp)
 185          {
 186   1          //Done
 187   1          disp = pwm;
 188   1          return 0;
 189   1      }
 190          #endif
 191          
 192          //-----------------------------------------------------------------------------
 193          // APP_reset
 194          //-----------------------------------------------------------------------------
 195          //
 196          // Return Value : 0
 197          // Parameters   : None
 198          // Description: This function called when PC send 'RST\n' cmd
 199          //
 200          //-----------------------------------------------------------------------------
 201          static bit APP_reset(void)
 202          {
 203   1          SL_MTR_stop_motor();
 204   1          return 0;
 205   1      }
 206          
 207          
 208          //-----------------------------------------------------------------------------
 209          // End Of File
 210          //-----------------------------------------------------------------------------
*** WARNING C316 IN LINE 210 OF C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\EFM8BB1_BLDC_PORT.c:
             - unterminated conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     59    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)

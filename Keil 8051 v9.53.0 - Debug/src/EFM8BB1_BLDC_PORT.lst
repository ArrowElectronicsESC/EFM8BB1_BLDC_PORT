C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 02/10/2020 16:02:16 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE EFM8BB1_BLDC_PORT
OBJECT MODULE PLACED IN .\src\EFM8BB1_BLDC_PORT.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\A92862\
                    -SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\EFM8BB1_BLDC_PORT.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNING
                    -LEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\A92862\SimplicityStudio\v4_workspa
                    -ce\EFM8BB1_BLDC_PORT\inc;C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\config;C:/SiliconLabs/Simpl
                    -icityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7
                    -//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8BB1_LCK/config;C:/SiliconLabs/
                    -SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sd
                    -ks/8051/v4.1.7//Device/EFM8BB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/periphe
                    -ral_driver/inc) PRINT(.\src\EFM8BB1_BLDC_PORT.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\EFM8BB1_BLDC_PORT.OBJ
                    -)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // EFM8BB1_BLDC_PORT.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Created on: Apr 15, 2013
   8          // Author: sgghang
   9          //
  10          // Adapted on: Jan 6, 2020
  11          // Author: a92862
  12          
  13          //-----------------------------------------------------------------------------
  14          // Includes
  15          //-----------------------------------------------------------------------------
  16          
  17          #include "bldcdk.h"
  18          
  19          //-----------------------------------------------------------------------------
  20          // Function Prototypes
  21          //-----------------------------------------------------------------------------
  22          static U8 APP_tune_callback(U16 pwm, U16 disp);
  23          static bit APP_reset(void);
  24          void Port_Setup(void);
  25          
  26          //-----------------------------------------------------------------------------
  27          // SiLabs_Startup() Routine
  28          // ----------------------------------------------------------------------------
  29          // This function is called immediately after reset, before the initialization
  30          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  31          // useful place to disable the watchdog timer, which is enable by default
  32          // and may trigger before main() in some instances.
  33          //-----------------------------------------------------------------------------
  34          void SiLabs_Startup (void)
  35          {
  36   1          WDTCN = 0xDE;           // Disable watchdog timer
  37   1          WDTCN = 0xAD;
  38   1      }
  39           
  40          //-----------------------------------------------------------------------------
  41          // main() Routine
  42          //-----------------------------------------------------------------------------
  43          
  44          void main(void)
  45          {
  46   1              CLKSEL = 0x0;
  47   1              Port_Setup();
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 02/10/2020 16:02:16 PAGE 2   

  48   1              UART_init();
  49   1              ADC_initialize_adc();
  50   1              MCP_tune_callback = &APP_tune_callback;
  51   1              MCP_reset_callback = &APP_reset;
  52   1              MCP_init();
  53   1              SL_MTR_init();
  54   1              MTRAPP_init();
  55   1      
  56   1              IE_EA = 1;
  57   1              while (1)
  58   1              {
  59   2                      ADC_task();
  60   2                      btn_process();
  61   2                      MTRAPP_task();
  62   2                      MCP_task();
  63   2              }
  64   1      }
  65          
  66          
  67          //-----------------------------------------------------------------------------
  68          // Port_Setup
  69          //-----------------------------------------------------------------------------
  70          //
  71          // Return Value : None
  72          // Parameters   : None
  73          //
  74          // P0.1~P0.2 => Input, Hall sensor or BEMF
  75          // P0.3 => Input, VMY
  76          // P0.4, P0.5 => UART
  77          // P0.6 => Input, Current measurement, ADC
  78          // P0.7 => Input, VDMC, ADC
  79          // P1.0 ==> POT, ADC or PWM input
  80          // P1.1 => Output for Led or SW101 (DIRECTION BUTTON)
  81          // P1.2~P1.7 => Output, PWM for motor driving
  82          // P2.0 => C2D and LED
  83          // P2.1 => Input SWITCH(START/STOP) SW102
  84          //-----------------------------------------------------------------------------
  85          void Port_Setup(void)
  86          {
  87   1          P0 = 0xFF;
  88   1          P1 = 0xFF;
  89   1          P2 = 0xFF;
  90   1      
  91   1          // P0.6(I_MEAS), P0.7(VMDC) analog
  92   1          // We leave P0.0-P0.3 digital but connected to comparator mux
  93   1          // so that we can use PWM to filter the pin by driving it low when required
  94   1          // P0.0~P0.2 : VMA, VMB, VMC, P0.3:VMY - refer to AN
  95   1      
  96   1          P0MDIN = PxMDIN_INIT_VAL & 0xFF;
  97   1          P1MDIN = (PxMDIN_INIT_VAL>>8) & 0xFF;
  98   1      
  99   1          // P0.4 UART TX : push pull
 100   1          P0MDOUT |= 0x10;
 101   1      
 102   1          // push pull for motor gate drive pins
 103   1          P1MDOUT |= MOTDRV_ALL_MASK;
 104   1      
 105   1          // Configure buttons.  If FEATURE_BTNx is not defined, the macro does not
 106   1              // generate any code.
 107   1      //      CONFIG_BTN0();
 108   1      //      CONFIG_BTN1();
 109   1      
 110   1          // skip all except UART and one of filtered terminal pins which will
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 02/10/2020 16:02:16 PAGE 3   

 111   1          // detect ZC during startup.
 112   1          P0SKIP = DEFAULT_P0SKIP & (~FILTERED_A_MASK);
 113   1          P1SKIP = DEFAULT_P1SKIP;
 114   1      
 115   1          // Enable Xbar, UART and CEX0,1, DISABLE weak pull-up
 116   1          // VMA,VMB, VMC, VMY must not have any pull up resister.
 117   1          // refer to AN
 118   1          XBR0 = 1;
 119   1          XBR1 = 0x02;
 120   1          XBR2 |= 0xC0;
 121   1      
 122   1      }
 123          
 124          //------------------------------------------------------------------------------
 125          // This call-back will be called by MCP_Task() when TUNE command is executed
 126          //------------------------------------------------------------------------------
 127          #ifdef FEATURE_PID_TUNE_FUNCTION
              U16 SEG_XDATA C0;
              U16 SEG_XDATA tune_disp;
              U8 SEG_XDATA tune_cnt = 0;
              U16 SEG_XDATA Y0, Amplitude;
              U16 SEG_XDATA half_pu, Pu;
              U16 SEG_XDATA last_half_pu;
              U16 SEG_XDATA max_speed, last_max_speed;
              U16 SEG_XDATA twait, twait0;
              U16 SEG_XDATA speed, prev_speed;
              U16 SEG_XDATA nKu, nKi, nKp;
              U32 SEG_XDATA KA;
              bit dec;
              bit tune_in_progress;
              extern struct pt SEG_XDATA mcp_tune;
              #define TEST_CNT    20
              
              #define KP_KONST    ((U32)(ROUND_DIV((U32)(65536UL*3.2*3.14),(4UL*256))))
              #define KI_KONST    ((U32)ROUND_DIV( (U32)(65536UL*3.2*2.2*3.14), (4UL*256*((DEFAULT_PID_INTERVAL+1)))))
              
              static U8 APP_tune_callback(U16 pwm, U16 disp)
              {
                  bit event = 0;
                  C0 = pwm;
                  tune_disp = disp;
              
                  tune_in_progress = 1;
                  PT_BEGIN(&mcp_tune);
              
                  // wait until motor started...
                  PT_WAIT_UNTIL(&mcp_tune, (MOTOR_RUNNING == SLR_motor_state));
              
                  // motor started. wait stable running
                  // set initial duty cycle(C0) for test
                  SLR_pwm_duty = C0;
                  PCA_change_duty_cycle(SLR_pwm_duty);
              
                  twait0 = SL_MTR_time();
                  twait = twait0;
                  while((twait - twait0) < 5000)
                  {
                      twait = SL_MTR_time();
                      PT_YIELD(&mcp_tune);
                  }
              
                  // start pid tuning.
                  // save initial speed.
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 02/10/2020 16:02:16 PAGE 4   

                  Y0 = MCP_get_16bit_register(MCP_REG_PRESENT_MOTOR_SPEED);
                  tune_cnt = 0;
                  dec = 1;
                  half_pu = 0L;
                  max_speed = 0;
              
                  // decrease duty cycle firstly.
                  SLR_pwm_duty = C0 - tune_disp;
                  PCA_change_duty_cycle(SLR_pwm_duty);
                  while(tune_cnt < TEST_CNT)
                  {
                      PT_WAIT_UNTIL(&mcp_tune, ((U8)SL_MTR_time() & DEFAULT_PID_INTERVAL) == 0);
                      speed = MCP_get_16bit_register(MCP_REG_PRESENT_MOTOR_SPEED);
                      if(dec)
                      {
                          if( (speed+2) < Y0)
                          {
                              SLR_pwm_duty = C0 + tune_disp;
                              event = 1;
                          }
                      }
                      else
                      {
                          if( speed > (Y0+2) )
                          {
                              SLR_pwm_duty = C0 - tune_disp;
                              event = 1;
                          }
                      }
                      if(event)
                      {
                          PCA_change_duty_cycle(SLR_pwm_duty);
                          twait = SL_MTR_time();
                          dec = ~dec;
                          tune_cnt++;
                          half_pu = twait - last_half_pu;
                          last_half_pu = twait;
                          last_max_speed = max_speed;
                          event = 0;
                      }
              
                      if( speed > max_speed)
                      {
                          max_speed = speed;
                      }
                      //PT_YIELD(&mcp_tune);
                  }
              
                  // end test
                  Pu = half_pu*2;
                  Amplitude = (last_max_speed-Y0);
              #if 0
                  MCP_debug_print("P%d\n", (U32)Pu);
                  MCP_debug_print("A%d\n", (U32)Amplitude);
              #endif
              
                  // Ku = (4*d)/(a*3.14)
                  // Tyreus-Luyben PI Variables.
                  // Kp = Ku/3.2 = 4*d/(a*3.14*3.2)
                  KA = KP_KONST*Amplitude;
                  nKp = ROUND_DIV((((U32)tune_disp)<<16), KA);
                  // Ki = Kp/(2.2*Pu) = 4*d/(a*3.14*3.2*2.2*Pu);
                  KA = KA*Pu;
C51 COMPILER V9.53.0.0   EFM8BB1_BLDC_PORT                                                 02/10/2020 16:02:16 PAGE 5   

                  nKi = ROUND_DIV((((U32)tune_disp)<<16), KA);
              
                  MCP_set_16bit_register(MCP_REG_PROPORTIONAL_GAIN,nKp, 0);
                  MCP_set_16bit_register(MCP_REG_INTEGRAL_GAIN,nKi, 0);
              
                  //Done
                  tune_in_progress = 0;
                  PT_END(&mcp_tune);
                  return 2;
              }
              
              #else
 249          static U8 APP_tune_callback(U16 pwm, U16 disp)
 250          {
 251   1          //Done
 252   1          disp = pwm;
 253   1          return 0;
 254   1      }
 255          #endif
 256          
 257          //-----------------------------------------------------------------------------
 258          // APP_reset
 259          //-----------------------------------------------------------------------------
 260          //
 261          // Return Value : 0
 262          // Parameters   : None
 263          // Description: This function called when PC send 'RST\n' cmd
 264          //
 265          //-----------------------------------------------------------------------------
 266          static bit APP_reset(void)
 267          {
 268   1          SL_MTR_stop_motor();
 269   1          return 0;
 270   1      }
 271          
 272          
 273          //-----------------------------------------------------------------------------
 274          // End Of File
 275          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    107    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

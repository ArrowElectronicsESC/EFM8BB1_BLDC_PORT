C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE MTRAPP
OBJECT MODULE PLACED IN .\src\mtrapp.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\A92862\
                    -SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\mtrapp.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FL
                    -OATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_
                    -BLDC_PORT\inc;C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\config;C:/SiliconLabs/SimplicityStudio
                    -/v4/developer/sdks/8051/v4.1.7//kits/common/drivers/efm8_retargetserial;C:/SiliconLabs/SimplicityStudio/v4/developer/sdk
                    -s/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/common/bsp;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8BB1_LCK/config;C:/SiliconLabs/SimplicityStudio/v4/develope
                    -r/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8B
                    -B1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/peripheral_driver/inc) PRINT(.\src\
                    -mtrapp.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\mtrapp.OBJ)

line level    source

   1          /*
   2           * mtrapp.c
   3           *
   4           *  Created on: Jan 20, 2020
   5           *      Author: a92862
   6           */
   7          
   8          #include "bldcdk.h"
*** WARNING C322 IN LINE 130 OF \Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\BLDC_RD_Build_Params.h
             -: unknown identifier
   9          
  10          //-----------------------------------------------------------------------------
  11          // Global Constants
  12          //-----------------------------------------------------------------------------
  13          
  14          #define MTRAPP_ATOMIC_ACCESS_START()     \
  15          do                                       \
  16          {                                        \
  17              saved_ea = EA;                       \
  18              EA = 0;                              \
  19          } while (0)
  20          
  21          #define MTRAPP_ATOMIC_ACCESS_END()       \
  22          do                                       \
  23          {                                        \
  24              EA = saved_ea;                       \
  25          } while (0)
  26          
  27          
  28          //-----------------------------------------------------------------------------
  29          // Global Variables
  30          //-----------------------------------------------------------------------------
  31          // Additional motor current to accumulate to perform further averaging
  32          #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
  33          static SEG_DATA U16     prev_target_rpm;
  34          #endif
  35          static SEG_XDATA U16     read_speed_interval;
  36          
  37          #if BLDC_RD_RPM_PWM_SRC == PWM_SPEED_SOURCE
              SEG_XDATA UU32          prev_edge;
              SEG_XDATA UU32          new_edge;
              bit                     last_edge_event;
              #endif
  42          static bit speed_ctrl_by_pc;
  43          static bit start_by_pc;
  44          static SEG_XDATA U16    pot_reading;
  45          
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 2   

  46          //-----------------------------------------------------------------------------
  47          // MTRAPP_init
  48          //-----------------------------------------------------------------------------
  49          //
  50          // Return Value : None
  51          // Parameters   : None
  52          //
  53          // initialization for application level.
  54          //-----------------------------------------------------------------------------
  55          void MTRAPP_init()
  56          {
  57   1          read_speed_interval = DEFAULT_SPEED_ADC_INTERVAL;
  58   1          SLW_oc_debounce = MCP_get_8bit_register(MCP_REG_OVER_CURRENT_PERSISTANCE);
  59   1          SLW_current_limit = MCP_get_8bit_register(MCP_REG_OVER_CURRENT_THRESHOLD);
  60   1          SLW_motor_max_rpm = MCP_get_16bit_register(MCP_REG_MAXIMUM_OPERATIONAL_SPEED);
  61   1          speed_ctrl_by_pc = 0;
  62   1          start_by_pc = 0;
  63   1      #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
  64   1          SLW_target_rpm = 0;
  65   1      #endif
  66   1          SLW_target_pwm_duty = 0;
  67   1          pot_reading = 0;
  68   1      #if BLDC_RD_RPM_PWM_SRC == PWM_SPEED_SOURCE
                  // enable port match interrupt
                  EIE1 |= (0x01<<1);
              #endif
  72   1      }
  73          
  74          //-----------------------------------------------------------------------------
  75          // MTRAPP_task
  76          //-----------------------------------------------------------------------------
  77          //
  78          // Return Value : None
  79          // Parameters   : None
  80          //
  81          // Application level task.
  82          // NOTE : application should call SL_MTR_motor() regularly to keep motor
  83          // running.
  84          //-----------------------------------------------------------------------------
  85          void MTRAPP_task()
  86          {
  87   1      #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
  88   1          U16 SEG_XDATA Pg, Ig;
  89   1      #endif
  90   1          static U8 last_report;
  91   1          U8 tmp;
  92   1          bit run_dir;
  93   1      
  94   1          // keep motor running and manage state of motor
  95   1          // NOTE : application should call this regularly.
  96   1          SL_MTR_motor();
  97   1      
  98   1          tmp = is_btn1_pressed();
  99   1          if( MOTOR_STOPPED == SLR_motor_state )
 100   1          {
 101   2              if (tmp || start_by_pc)
 102   2              {
 103   3                  if( !SLR_motor_stalled)
 104   3                  {
 105   4                      if(ADC0CN0 & 0x90)
 106   4                      {
 107   5                          // SL_MTR_start_motor need CPT0MX_IMEASURE pin which is
 108   5                          // same as IMEAS_ADCMX.
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 3   

 109   5                          // wait if adc in progress by ADC_task().
 110   5                              while(!ADC0CN0_ADINT);
 111   5                          // disconnect all pins
 112   5                          ADC0MX = 0x1F;
 113   5                      }
 114   4      
 115   4                      if (tmp)
 116   4                      {
 117   5                          // Button 1 pressed - we reset speed_ctrl_by_pc
 118   5                          speed_ctrl_by_pc = 0;
 119   5                      }
 120   4      
 121   4                      SL_MTR_start_motor();
 122   4                      // Configure LED0 here - in case we share LED with buttons
 123   4                      // In ref design, BTN0 and LED0 are shared.
 124   4                      // If FEATURE_LED0 is not defined, this macro does not
 125   4                      // generate any code.
 126   4                      CONFIG_LED0();
 127   4                      // update direction register.
 128   4                      MCP_set_8bit_register(MCP_REG_PRESENT_MOTOR_DIRECTION, \
 129   4                              SLW_user_direction, 0);
 130   4                  }
 131   3                  start_by_pc = 0;
 132   3              }
 133   2      
 134   2              // --------------------------------------------------------------------
 135   2              // read motor direction changes
 136   2              MTRAPP_read_direction();
 137   2      
 138   2              // --------------------------------------------------------------------
 139   2              // followings can be move to mtrapp_init(), if application need only
 140   2              // default(or fixed) value.
 141   2              SLW_oc_debounce = MCP_get_8bit_register(MCP_REG_OVER_CURRENT_PERSISTANCE);
 142   2              SLW_current_limit = MCP_get_8bit_register(MCP_REG_OVER_CURRENT_THRESHOLD);
 143   2              SLW_motor_max_rpm = MCP_get_16bit_register(MCP_REG_MAXIMUM_OPERATIONAL_SPEED);
 144   2              SL_MTR_change_num_poles( MCP_get_8bit_register \
 145   2                      (MCP_REG_MOTOR_POLE_PAIRS_COUNT) * 2 );
 146   2      #if BLDC_RD_RPM_OR_PWM == PWM_PARAMETER
                      SLW_acceleration_step_size = \
                              MCP_get_16bit_register(MCP_REG_ACCELERATION_STEP_SIZE);
                      SLW_deceleration_step_size = \
                              MCP_get_16bit_register(MCP_REG_DECELERATION_STEP_SIZE);
              #endif
 152   2      
 153   2      #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
 154   2              Pg = MCP_get_16bit_register(MCP_REG_PROPORTIONAL_GAIN);
 155   2              Ig = MCP_get_16bit_register(MCP_REG_INTEGRAL_GAIN);
 156   2              SL_MTR_change_pid_gain(Pg, Ig);
 157   2      #endif
 158   2          }
 159   1          else if( MOTOR_RUNNING == SLR_motor_state )
 160   1          {
 161   2      #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
 162   2              if (tmp || !SLW_target_rpm )
 163   2      #elif BLDC_RD_RPM_OR_PWM == PWM_PARAMETER
                      if (tmp || !SLW_target_pwm_duty )
              #endif
 166   2      
 167   2              {
 168   3                  SL_MTR_stop_motor();
 169   3      #if defined(FEATURE_HYPERDRIVE)
                          // The following does nothing if FEATURE_LED0 is not enabled
                          LED0_OFF();
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 4   

              #endif
 173   3                  // Re-configure BTN0 because this is shared with LED0 in
 174   3                  // reference design kit.
 175   3                  CONFIG_BTN0();
*** WARNING C206 IN LINE 175 OF C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\mtrapp.c: 'CONFIG_BT
             -N0': missing function-prototype
 176   3              }
 177   2          }
 178   1          // Enable stream data even motor stopped.
 179   1          tmp = (U8)SL_MTR_time();
 180   1          if((last_report != tmp) && (tmp & RPM_REPORT_PERIOD == RPM_REPORT_PERIOD))
 181   1          {
 182   2              last_report = tmp;
 183   2              MCP_set_16bit_register(MCP_REG_PRESENT_MOTOR_SPEED,
 184   2                      SLR_motor_current_rpm, 0);
 185   2              MCP_set_16bit_register(MCP_REG_ACTIVE_PWM_DUTY_CYCLE, SLR_pwm_duty, 0);
 186   2              run_dir = MCP_get_8bit_register(MCP_REG_PRESENT_MOTOR_DIRECTION);
 187   2              MCP_set_8bit_register(MCP_REG_PRESENT_MOTOR_DIRECTION, \
 188   2                      run_dir, 0);
 189   2          }
 190   1      
 191   1          // -----------------------------------------------------------------------
 192   1          // read new target speed
 193   1          MTRAPP_read_target_speed();
 194   1      
 195   1          // -----------------------------------------------------------------------
 196   1          // update average current to register 0x32.
 197   1          MCP_set_16bit_register(MCP_REG_MOTOR_COIL_CURRENT,SLR_motor_current,0);
 198   1      
 199   1          // -----------------------------------------------------------------------
 200   1          // read Vmotor and update register. 0x34
 201   1          // update reg 0x34
 202   1      #ifdef FEATURE_MEAS_VMDC
 203   1          MCP_set_16bit_register(MCP_REG_MOTOR_OPERATING_VOLTAGE,SLR_motor_voltage, 0);
 204   1      #endif
 205   1      }
 206          
 207          //-----------------------------------------------------------------------------
 208          // MTRAPP_read_direction
 209          //-----------------------------------------------------------------------------
 210          //
 211          // Return Value : None
 212          // Parameters   : None but it will change global variable SLW_user_direction.
 213          //
 214          //  read NEXT motor running direction according to build parameter.
 215          //  In case of DIRECTION_BY_BUTTON, when button released
 216          //  SLW_user_direction is updated.
 217          //-----------------------------------------------------------------------------
 218          void MTRAPP_read_direction(void)
 219          {
 220   1          static bit wait_release=1;
 221   1      
 222   1          if(wait_release == 1)
 223   1          {
 224   2              if( IS_BTN0_PRESSED() )
 225   2              {
 226   3                  wait_release = 0;
 227   3              }
 228   2          }
 229   1          else if( !IS_BTN0_PRESSED() && (wait_release == 0))
 230   1          {
 231   2              SLW_user_direction = ~SLW_user_direction;
 232   2              MCP_set_8bit_register(MCP_REG_TARGET_MOTOR_DIRECTION, \
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 5   

 233   2                      (U8)SLW_user_direction, 0);
 234   2              wait_release = 1;
 235   2          }
 236   1          // read register. 0x02 (0:CW, 1:CCW)
 237   1          SLW_user_direction = MCP_get_8bit_register(MCP_REG_TARGET_MOTOR_DIRECTION);
 238   1      }
 239          
 240          
 241          //-----------------------------------------------------------------------------
 242          // MTRAPP_read_target_speed
 243          //-----------------------------------------------------------------------------
 244          //
 245          // Return Value : None
 246          // Parameters   : None but it will change global variable SLW_target_rpm.
 247          //
 248          //  set SLW_target_rpm or SLW_target_pwm_duty according to build-time parameter.
 249          //  Those target values are saved to register accordingly.
 250          //  To reach 100% of target duty cycle or SLW_motor_max_rpm in any case,
 251          //  just added small constant to the adc result.
 252          //-----------------------------------------------------------------------------
 253          void MTRAPP_read_target_speed(void)
 254          {
 255   1      #if BLDC_RD_RPM_PWM_SRC == POT_SPEED_SOURCE
 256   1      #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
 257   1          static U16 last_read_speed_time;
 258   1          U16 temp;
 259   1      
 260   1          if( ((U16)SL_MTR_time() - last_read_speed_time) < read_speed_interval )
 261   1          {
 262   2              return;
 263   2          }
 264   1          last_read_speed_time = (U16)SL_MTR_time();
 265   1      
 266   1          if (speed_ctrl_by_pc || ( MOTOR_STOPPED == SLR_motor_state ))
 267   1          {
 268   2              // read reg 0x3C (target rpm)
 269   2              temp = MCP_get_16bit_register(MCP_REG_TARGET_MOTOR_SPEED);
 270   2              if( SLW_target_rpm != temp )
 271   2              {
 272   3                  if (temp == 1)
 273   3                  {
 274   4                      // Special case of target speed of 1.
 275   4                      start_by_pc = 1;
 276   4      
 277   4                      // Restore target speed
 278   4                      MCP_set_16bit_register(MCP_REG_TARGET_MOTOR_SPEED, SLW_target_rpm, 0);
 279   4                  }
 280   3                  else
 281   3                  {
 282   4                      SLW_target_rpm = temp;
 283   4                  }
 284   3                  speed_ctrl_by_pc = 1;
 285   3              }
 286   2          }
 287   1      
 288   1          // read latest adc result....
 289   1          temp = adc_result[ADC_MUX_POT];
 290   1          // CW : Increase, CCW : Decrease speed
 291   1          temp = MAX_ADC_VALUE - temp;
 292   1          // Just added some amount to reach SLW_motor_max_rpm(or 100% duty) in any case.
 293   1          temp += (MAX_ADC_VALUE>>5);      // about 3%
 294   1      
 295   1          pot_reading = ((U32)(SLW_motor_max_rpm * (U32)temp))>>ADC_RESOLUTION;
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 6   

 296   1          pot_reading = (prev_target_rpm + pot_reading)>>1;
 297   1          prev_target_rpm = pot_reading;
 298   1          if( pot_reading < APP_MOTOR_MIN_RPM )
 299   1          {
 300   2              pot_reading = APP_MOTOR_MIN_RPM;
 301   2          }
 302   1      
 303   1          if ( !speed_ctrl_by_pc )
 304   1          {
 305   2              // Use POT when speed is not controlled by PC
 306   2              SLW_target_rpm = pot_reading;
 307   2              // set register
 308   2              MCP_set_16bit_register(MCP_REG_TARGET_MOTOR_SPEED, SLW_target_rpm, 0);
 309   2          }
 310   1      
 311   1      #elif BLDC_RD_RPM_OR_PWM == PWM_PARAMETER
                  static U16 last_read_speed_time;
                  U16 temp;
              
                  if( ((U16)SL_MTR_time() - last_read_speed_time) < read_speed_interval )
                  {
                      return;
                  }
                  last_read_speed_time = (U16)SL_MTR_time();
              
                  if (speed_ctrl_by_pc || ( MOTOR_STOPPED == SLR_motor_state ))
                  {
                      // read reg 0x3C (target rpm)
                      temp = MCP_get_16bit_register(MCP_REG_TARGET_PWM_DUTY_CYCLE);
                      if( SLW_target_pwm_duty != temp )
                      {
                          if (temp == 1)
                          {
                              // Special case of target speed of 1.
                              start_by_pc = 1;
              
                              // Restore target PWM duty cycle
                              MCP_set_16bit_register(MCP_REG_TARGET_PWM_DUTY_CYCLE, SLW_target_pwm_duty, 0);
                          }
                          else
                          {
                              SLW_target_pwm_duty = temp;
                          }
                          speed_ctrl_by_pc = 1;
                      }
                  }
              
                  // read latest adc result....
                  temp = adc_result[ADC_MUX_POT];
                  // CW : Increase, CCW : Decrease speed
                  temp = MAX_ADC_VALUE - temp;
                  // Just added some amount to reach SLW_motor_max_rpm(or 100% duty) in any case.
                  temp += (MAX_ADC_VALUE>>5);      // about 3%
              
                  if( temp > MAX_ADC_VALUE)
                  {
                      pot_reading = MAX_USER_PWM_VALUE;
                  }
                  else
                  {
                      // target pwm = 16 bit value.
                      pot_reading = (temp<<(16-ADC_RESOLUTION));
                  }
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 7   

              
                  if ( !speed_ctrl_by_pc )
                  {
                      // Use POT when speed is not controlled by PC
                      SLW_target_pwm_duty = pot_reading;
                      // set register (16bit pwm duty cycle)
                      MCP_set_16bit_register(MCP_REG_TARGET_PWM_DUTY_CYCLE, \
                                             SLW_target_pwm_duty, 0);
                  }
              
              #endif
 370   1      #elif BLDC_RD_RPM_PWM_SRC == PWM_SPEED_SOURCE
                  MTRAPP_read_pwm_input();
              #endif
 373   1      }
 374          
 375          
 376          #if BLDC_RD_RPM_PWM_SRC == PWM_SPEED_SOURCE
              //-----------------------------------------------------------------------------
              // MTRAPP_read_pwm_input
              //-----------------------------------------------------------------------------
              //
              // Return Value : None
              // Parameters   : None
              //
              //  Assuming the input frequency is 50~100Hz (20ms ~ 10ms)
              //  Measuring % of high period.
              //  Ex. target_rpm = MOTOR_MAX_RPM*high_period/(high_period+low_period)
              //-----------------------------------------------------------------------------
              void MTRAPP_read_pwm_input(void)
              {
                  UU32 SEG_XDATA tmp1, tmp2;
                  UU16 SEG_XDATA period;
                  U16 SEG_XDATA period_low, period_high;
                  U16 temp;
                  bit edge_event;
              
                  EA = 0;
                  edge_event = last_edge_event;
                  tmp1.U32 = prev_edge.U32;
                  tmp2.U32 = new_edge.U32;
                  EA = 1;
              
                  // to avoid overflow at high speed (200K rpm)
                  period.U16 = (U16)((tmp2.U32 - tmp1.U32)>>8);
                  // rising edge (end or start of period)
                  if( edge_event)
                  {
                      period_low = period.U16;
                  }
                  // falling edge (end of duty)
                  else
                  {
                      period_high = period.U16;
                  }
              
              #if BLDC_RD_RPM_OR_PWM == RPM_PARAMETER
                  if (speed_ctrl_by_pc || ( MOTOR_STOPPED == SLR_motor_state ))
                  {
                      temp = MCP_get_16bit_register(MCP_REG_TARGET_MOTOR_SPEED);
                      if( SLW_target_rpm != temp )
                      {
                          if (temp == 1)
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 8   

                          {
                              // Special case of target speed of 1.
                              start_by_pc = 1;
              
                              // Restore target speed
                              MCP_set_16bit_register(MCP_REG_TARGET_MOTOR_SPEED, SLW_target_rpm, 0);
                          }
                          else
                          {
                              SLW_target_rpm = temp;
                          }
                          speed_ctrl_by_pc = 1;
                      }
                  }
              
                  pot_reading = (U16)( ((U32)SLW_motor_max_rpm * period_high ) / \
                          (U32)( period_high+period_low) );
                  // Just added some amount.
                  pot_reading += (MOTOR_MAX_RPM>>5);
                  if(pot_reading < APP_MOTOR_MIN_RPM)
                      pot_reading = APP_MOTOR_MIN_RPM;
              
                  if ( !speed_ctrl_by_pc )
                  {
                      // Use POT when speed is not controlled by PC
                      SLW_target_rpm = pot_reading;
                      // set register
                      MCP_set_16bit_register(MCP_REG_TARGET_MOTOR_SPEED, SLW_target_rpm, 0);
                  }
              
              #elif BLDC_RD_RPM_OR_PWM == PWM_PARAMETER
                  if (speed_ctrl_by_pc || ( MOTOR_STOPPED == SLR_motor_state ))
                  {
                      // read reg 0x3C (target rpm)
                      temp = MCP_get_16bit_register(MCP_REG_TARGET_PWM_DUTY_CYCLE);
                      if( SLW_target_pwm_duty != temp )
                      {
                          if (temp == 1)
                          {
                              // Special case of target speed of 1.
                              start_by_pc = 1;
              
                              // Restore target PWM duty cycle
                              MCP_set_16bit_register(MCP_REG_TARGET_PWM_DUTY_CYCLE, SLW_target_pwm_duty, 0);
                          }
                          else
                          {
                              SLW_target_pwm_duty = temp;
                          }
                          speed_ctrl_by_pc = 1;
                      }
                  }
              
                  pot_reading = (U16)( ( (U32)MAX_USER_PWM_VALUE * period_high ) / \
                          (U32)( period_high + period_low ) );
                  // Just added some amount.
                  pot_reading += (MAX_USER_PWM_VALUE>>5);
                  if(pot_reading < (MAX_USER_PWM_VALUE>>5))
                      pot_reading = MAX_USER_PWM_VALUE;
                  else if(pot_reading < SLR_minimum_duty.U16)
                      pot_reading = SLR_minimum_duty.U16;
              
              
C51 COMPILER V9.53.0.0   MTRAPP                                                            01/21/2020 10:02:11 PAGE 9   

                  if ( !speed_ctrl_by_pc )
                  {
                      // Use POT when speed is not controlled by PC
                      SLW_target_pwm_duty = pot_reading;
                      // set register (16bit pwm duty cycle)
                      MCP_set_16bit_register(MCP_REG_TARGET_PWM_DUTY_CYCLE, \
                                             SLW_target_pwm_duty, 0);
                  }
              #endif
              }
              INTERRUPT(PORT_MATCH_ISR, INTERRUPT_PORT_MATCH)
              {
                  static U8 ovf;
              
                  prev_edge.U32 = new_edge.U32;
                  SL_MTR_GET_32BIT_TIME(new_edge);
              
                  last_edge_event = (PWMIN_MAT != (1<<PWMIN_BIT));
                  // set next port miss match event
                  PWMIN_MAT ^= (1<<PWMIN_BIT);
              }
              #endif
 507          
*** WARNING C316 IN LINE 507 OF C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\mtrapp.c: unterminat
             -ed conditionals


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    609    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.53.0.0   PCA_LIB_8BIT_PWM_OUTPUT                                           01/15/2020 15:49:39 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PCA_LIB_8BIT_PWM_OUTPUT
OBJECT MODULE PLACED IN .\src\PCA_Lib_8Bit_PWM_Output.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\A92862\
                    -SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\src\PCA_Lib_8Bit_PWM_Output.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) W
                    -ARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\A92862\SimplicityStudio\v4_w
                    -orkspace\EFM8BB1_BLDC_PORT\inc;C:\Users\A92862\SimplicityStudio\v4_workspace\EFM8BB1_BLDC_PORT\inc\config;C:/SiliconLabs
                    -/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Lib/efm8_assert;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/
                    -v4.1.7//kits/common/bsp;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//kits/EFM8BB1_LCK/config;C:/Silico
                    -nLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v4/develo
                    -per/sdks/8051/v4.1.7//Device/EFM8BB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.7//Device/EFM8BB1/p
                    -eripheral_driver/inc) PRINT(.\src\PCA_Lib_8Bit_PWM_Output.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\PCA_Lib_8
                    -Bit_PWM_Output.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // PCA0_8Bit_PWM_Output.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program sends a PWM waveform out of an I/O pin, using the PCA's
  10          // 8-bit PWM Output Mode.  The duty cycle of the waveform is modified
  11          // periodically within the main loop.
  12          //
  13          // In this example, PCA Module 0 is used to generate the waveform, and the
  14          // crossbar is configured to send the CEX0 pin out on P1.4.
  15          //
  16          // The frequency of the PWM signal generated at the CEX0 pin is equal to the
  17          // PCA main timebase frequency divided by 256.
  18          //
  19          // The PCA time base in this example is configured to use SYSCLK, and SYSCLK
  20          // is set up to use the internal oscillator running at 24.5 MHz.  Therefore,
  21          // the frequency of the PWM signal will be 24.5 MHz / 256 = 95.7 kHz.
  22          // Using different PCA clock sources or a different processor clock will
  23          // result in a different frequency for the PWM signal.
  24          //
  25          //    -------------------------------------------------------------------------
  26          //    How "8-Bit PWM Mode" Works:
  27          //
  28          //       The PCA's 8-bit PWM Mode works by setting an output pin low every
  29          //    time the main PCA counter low byte (PCA0L) overflows, and then setting
  30          //    the pin high whenever a specific match condition is met.
  31          //
  32          //    Upon a PCA0L overflow (PCA0L incrementing from 0xFF to 0x00), two things
  33          //    happen:
  34          //
  35          //    1) The CEXn pin will be set low.
  36          //    2) The contents of the PCA0CPHn register for the module are copied into
  37          //       the PCA0CPLn register for the module.
  38          //
  39          //    When the PCA0L register increments and matches the PCA0CPLn register for
  40          //    the selected module, the CEXn pin will be set high, except when the
  41          //    ECOMn bit in PCA0CPMn is cleared to '0'.  By varying the value of the
  42          //    PCA0CPHn register, the duty cycle of the waveform can also be varied.
  43          //
  44          //    When ECOMn = '1', the duty cycle of the PWM waveform is:
  45          //
  46          //       8-bit PWM Duty Cycle = (256 - PCA0CPLn) / 256
  47          //
C51 COMPILER V9.53.0.0   PCA_LIB_8BIT_PWM_OUTPUT                                           01/15/2020 15:49:39 PAGE 2   

  48          //    To set the duty cycle to 100%, a value of 0x00 should be loaded into the
  49          //    PCA0CPHn register for the module being used (with ECOMn set to '1').
  50          //    When the value of PCA0CPLn is equal to 0x00, the pin will never be
  51          //    set low.
  52          //
  53          //    To set the duty cycle to 0%, the ECOMn bit in the PCA0CPMn register
  54          //    should be cleared to 0.  This prevents the PCA0CPLn match from occurring,
  55          //    which results in the pin never being set high.
  56          //    -------------------------------------------------------------------------
  57          //
  58          //-----------------------------------------------------------------------------
  59          //
  60          // How To Test:
  61          //
  62          // 1) Connect the EFM8BB1 LCK board to a PC using a micro USB cable.
  63          // 2) Compile and download code to the EFM8BB1 LCK board.
  64          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  65          //    click the Debug button in the quick menu, or press F11.
  66          // 3) Run the code.
  67          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  68          //    click the Resume button in the quick menu, or press F8.
  69          // 4) Connect an oscilloscope to P1.4.
  70          // 5) Verify that the duty cycle of the waveform varies smoothly between
  71          //    minimum and maximum values.
  72          //
  73          //
  74          //
  75          // Target:         EFM8BB1
  76          // Tool chain:     Simplicity Studio / Keil C51 9.51
  77          // Command Line:   None
  78          //
  79          // Release 1.0 (BL)
  80          //    - Initial Release
  81          //    - 13 JAN 2015
  82          //
  83          
  84          //-----------------------------------------------------------------------------
  85          // Includes
  86          //-----------------------------------------------------------------------------
  87          
  88          #include "bsp.h"
  89          #include "InitDevice.h"
  90          #include "pca_0.h"
  91          
  92          //-----------------------------------------------------------------------------
  93          // SiLabs_Startup() Routine
  94          // ----------------------------------------------------------------------------
  95          // This function is called immediately after reset, before the initialization
  96          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  97          // useful place to disable the watchdog timer, which is enable by default
  98          // and may trigger before main() in some instances.
  99          //-----------------------------------------------------------------------------
 100          void SiLabs_Startup (void)
 101          {
 102   1        // Disable the watchdog here
 103   1      }
 104           
 105          //-----------------------------------------------------------------------------
 106          // main() Routine
 107          //-----------------------------------------------------------------------------
 108          
 109          void main(void)
 110          {
C51 COMPILER V9.53.0.0   PCA_LIB_8BIT_PWM_OUTPUT                                           01/15/2020 15:49:39 PAGE 3   

 111   1        uint16_t delay_count;                       // Used to implement a delay
 112   1        bool duty_direction = 0;                     // 0 = Decrease; 1 = Increase
 113   1        uint8_t duty_cycle = 0x80;
 114   1      
 115   1        enter_DefaultMode_from_RESET();
 116   1      
 117   1        while (1)
 118   1        {
 119   2          // Wait a little while
 120   2          for (delay_count = 15000; delay_count > 0; delay_count--);
 121   2      
 122   2          if (duty_direction == 1)                  // Direction = Increase
 123   2          {
 124   3            // First, check the ECOM0 bit
 125   3            if ((PCA0CPM0 & PCA0CPM0_ECOM__BMASK) == PCA0CPM0_ECOM__DISABLED)
 126   3            {
 127   4              PCA0CPM0 |= PCA0CPM0_ECOM__ENABLED;   // Set ECOM0 if it is '0'
 128   4            }
 129   3            else                                    // Increase duty cycle otherwise
 130   3            {
 131   4              duty_cycle--;                         // Increase duty cycle
 132   4      
 133   4              PCA0_writeChannel(PCA0_CHAN0, duty_cycle << 8);
 134   4      
 135   4      
 136   4              if (PCA0CPH0 == 0x00)
 137   4              {
 138   5                duty_direction = 0;                 // Change direction for next time
 139   5              }
 140   4            }
 141   3          }
 142   2          else                                      // Direction = Decrease
 143   2          {
 144   3            if (duty_cycle == 0xFF)
 145   3            {
 146   4              PCA0CPM0 &= ~PCA0CPM0_ECOM__BMASK;    // Clear ECOM0
 147   4              duty_direction = 1;                   // Change direction for next time
 148   4            }
 149   3            else
 150   3            {
 151   4              duty_cycle++;                         // Decrease duty cycle
 152   4      
 153   4              PCA0_writeChannel(PCA0_CHAN0, duty_cycle << 8);
 154   4            }
 155   3          }
 156   2      
 157   2        }
 158   1      }
 159          
 160          //-----------------------------------------------------------------------------
 161          // End Of File
 162          //-----------------------------------------------------------------------------


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     81    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.53.0.0   PCA_LIB_8BIT_PWM_OUTPUT                                           01/15/2020 15:49:39 PAGE 4   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
